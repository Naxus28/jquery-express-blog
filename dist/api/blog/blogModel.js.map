{"version":3,"sources":["../../../server/api/blog/blogModel.js"],"names":["posts","create","title","content","author","publishDate","Date","now","id","uuid","v4","arguments","post","push","get","find","sort","a","b","delete","postIndex","findIndex","splice","StorageException","update","updatedPost"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA;AACA,IAAMA,QAAQ,EAAd;;kBAEe;AACbC,QADa,wBACgE;AAAA,QAApEC,KAAoE,QAApEA,KAAoE;AAAA,QAA7DC,OAA6D,QAA7DA,OAA6D;AAAA,QAApDC,MAAoD,QAApDA,MAAoD;AAAA,gCAA5CC,WAA4C;AAAA,QAA5CA,WAA4C,oCAA9BC,KAAKC,GAAL,EAA8B;AAAA,uBAAlBC,EAAkB;AAAA,QAAlBA,EAAkB,2BAAbC,eAAKC,EAAL,EAAa;;;AAE3E;AACA,wCAAmBC,UAAU,GAAV,CAAnB;;AAEA,QAAMC,OAAO;AACXJ,YADW;AAEXN,kBAFW;AAGXC,sBAHW;AAIXC,oBAJW;AAKXC;AALW,KAAb;AAOAL,UAAMa,IAAN,CAAWD,IAAX;;AAEA,WAAOA,IAAP;AACD,GAhBY;AAiBbE,KAjBa,iBAiBF;AAAA,QAAPN,EAAO,uEAAJ,EAAI;;AACT;AACA,QAAIA,EAAJ,EAAQ;AACN,aAAOR,MAAMe,IAAN,CAAW;AAAA,eAAQH,KAAKJ,EAAL,KAAYA,EAApB;AAAA,OAAX,CAAP;AACD;;AAED;AACA,WAAOR,MAAMgB,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUA,EAAEb,WAAF,GAAgBY,EAAEZ,WAA5B;AAAA,KAAX,CAAP;AACD,GAzBY;AA0Bbc,QA1Ba,mBA0BNX,EA1BM,EA0BF;AACT,QAAMY,YAAYpB,MAAMqB,SAAN,CAAgB;AAAA,aAAQT,KAAKJ,EAAL,KAAYA,EAApB;AAAA,KAAhB,CAAlB;;AAEA,QAAIY,YAAY,CAAC,CAAjB,EAAoB;AAClBpB,YAAMsB,MAAN,CAAaF,SAAb,EAAwB,CAAxB;AACD,KAFD,MAEO;AACL,YAAM,IAAIG,kCAAJ,0BAA4Cf,EAA5C,mCAA8E,GAA9E,CAAN;AACD;AACF,GAlCY;AAmCbgB,QAnCa,kBAmCNC,WAnCM,EAmCO;AAAA,QACVjB,EADU,GACHiB,WADG,CACVjB,EADU;;AAElB,QAAMY,YAAYpB,MAAMqB,SAAN,CAAgB;AAAA,aAAQT,KAAKJ,EAAL,KAAYA,EAApB;AAAA,KAAhB,CAAlB;;AAEA,QAAIY,cAAc,CAAC,CAAnB,EAAsB;AACpB,YAAM,IAAIG,kCAAJ,0BAA4Cf,EAA5C,mCAA8E,GAA9E,CAAN;AACD;;AAED;AACAR,UAAMoB,SAAN,IAAmBK,WAAnB;;AAEA;AACA,WAAOA,WAAP;AACD;AAhDY,C","file":"blogModel.js","sourcesContent":["import uuid from 'uuid';\nimport { StorageException } from '../../errorHandlers/exceptionClasses';\nimport { validateApiRequest } from '../apiHelpers';\n\n// var to hold the post\nconst posts = [];\n\nexport default {\n  create({ title, content, author, publishDate = Date.now(), id = uuid.v4() }) {\n    \n    // if request is invalid this function throws an exception\n    validateApiRequest(arguments['0']); \n\n    const post = {\n      id,\n      title,\n      content,\n      author,\n      publishDate\n    };\n    posts.push(post);\n\n    return post;\n  },\n  get(id='') {\n    // if there is an id, find specific post\n    if (id) {\n      return posts.find(post => post.id === id);\n    }\n\n    // if no id is passed, return all posts in achronological order\n    return posts.sort((a, b) => b.publishDate - a.publishDate);\n  },\n  delete(id) {\n    const postIndex = posts.findIndex(post => post.id === id);\n    \n    if (postIndex > -1) {\n      posts.splice(postIndex, 1);\n    } else {\n      throw new StorageException(`Can't delete item \\`${id}\\` because it doesn't exist.`, 400);\n    }\n  },\n  update(updatedPost) {\n    const { id } = updatedPost;\n    const postIndex = posts.findIndex(post => post.id === id);\n    \n    if (postIndex === -1) {\n      throw new StorageException(`Can't update item \\`${id}\\` because it doesn't exist.`, 400);\n    }\n\n    // replace the old post with the new\n    posts[postIndex] = updatedPost;\n\n    // return the updated post\n    return updatedPost;\n  }\n};\n\n"]}